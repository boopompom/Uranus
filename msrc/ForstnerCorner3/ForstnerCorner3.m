function [ds_out, ps_out] = ForstnerCorner3(ds_in, ps_in)
%FORSTNERCORNER3    This function use the operator proposed by Forstner to
%                   detect corners.
%    Input:    Dataset and pixelSize
%    Output:    Dataset and pixelSize
%    Author:    Tsenmu
%    Date:    2012.01.29
%    Reference:    Karl Rohr* On 3D differential operators for detecting point landmarks

    %% Don't worry, what under this comment is all about mathematics!
    ps_out = ps_in;
    ds_in = squeeze(public_dataset2double(ds_in));
    [r c h] = size(ds_in);
    

    f = double(zeros([r+2, c+2, h+2]));
    f(2:r+1, 2:c+1, 2:h+1) = ds_in;
    clear ds_in;
    ds_out = double(zeros([r+2, c+2, h+2]));
    for ri = 2 : r+1
        for ci = 2 : c+1
            for z = 2 : h
                g_r = (f(ri+1, ci, z) - f(ri-1, ci, z))/2;
                g_c = (f(ri, ci+1, z) - f(ri, ci-1, z))/2;
                g_h = (f(ri, ci, z+1) - f(ri, ci, z-1))/2;
                Cg = [g_r^g_r, g_r*g_c, g_r*g_h; ...
                    g_r*g_c, g_c^2, g_c*g_h; ...
                    g_r*g_h, g_c*g_h, g_h^2];
                ds_out(ri, ci, z) = det(Cg) / trace(Cg);
            end
        end
    end
     ds_out_uint8 = uint8(zeros([r, c, h]));
    for ri = 2 : r+1
        for ci = 2 : c+1
            for z = 2 : h
                  if (ds_out(ri, ci, z) > ds_out(ri+1, ci+1, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci+1, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci+1, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci-1, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci-1, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci-1, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci+1, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci+1, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci+1, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci-1, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci-1, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci-1, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci+1, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci+1, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci+1, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci-1, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci-1, z) )

                ds_out_uint8(ri-1, ci-1, z-1) = 255;
                end
            end
        end
    end
     clear ds_out;
     ds_out = ds_out_uint8;
     ds_out = public_expand(ds_out);
     clear ds_out_uint8;
end