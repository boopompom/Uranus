function [ds_out, ps_out] = KRCorner3(ds_in, ps_in)
    ps_out = ps_in;
    ds_in = squeeze(public_dataset2double(ds_in));
%     size(ds_in)
    [r c h] = size(ds_in);
    
%% Don't worry, what under this comment is all about mathematics!
    f = double(zeros([r+2, c+2, h+2]));
    f(2:r+1, 2:c+1, 2:h+1) = ds_in;
    clear ds_in;
    ds_out = double(zeros([r+2, c+2, h+2]));
    for ri = 2 : r+1
        for ci = 2 : c+1
            for z = 2 : h
                g_r = f(ri+1, ci, z) - f(ri, ci, z);
                g_c = f(ri, ci+1, z) - f(ri, ci, z);
                g_h = f(ri, ci, z+1) - f(ri, ci, z);
                g_rr = f(ri+1, ci, z) - 2*f(ri, ci, z)  + f(ri-1, ci, z);
                g_cc = f(ri, ci+1, z) - 2*f(ri, ci, z) + f(ri, ci-1, z);
                g_hh = f(ri, ci, z+1) - 2*f(ri, ci, z) + f(ri, ci, z-1);
                g_rc = f(ri+1, ci-1, z) - f(ri, ci-1, z) ...
                    - f(ri+1, ci, z) + f(ri, ci, z);
                g_rh = f(ri+1, ci, z-1) - f(ri, ci, z-1) ...
                    - f(ri+1, ci, z) + f(ri, ci, z);
                g_ch = f(ri, ci+1, z-1) - f(ri, ci, z-1) ...
                    - f(ri, ci+1, z) + f(ri, ci, z);
                ds_out(ri, ci, z) = (g_r^2*(g_cc+g_hh) + g_c^2*(g_rr*g_hh) ...
                    + g_h^2*(g_rr*g_cc) - 2*(g_r*g_c*g_rc+g_r*g_h*g_rh ...
                    +g_c*g_h*g_ch)) / (g_r^2 + g_c^2 + g_h^2); 
            end
        end
    end
    ds_out_uint8 = uint8(zeros([r, c, h]));
    op = double(ones([3 3 3]));
    op(2, 2, 2) = 0;
    for ri = 2 : r+1
        for ci = 2 : c+1
            for z = 2 : h
                
                  if (ds_out(ri, ci, z) > ds_out(ri+1, ci+1, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci+1, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci+1, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci-1, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci-1, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri+1, ci-1, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci+1, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci+1, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci+1, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci-1, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci-1, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri, ci-1, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci+1, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci+1, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci+1, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci, z) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci, z-1) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci-1, z+1) && ...
                      ds_out(ri, ci, z) > ds_out(ri-1, ci-1, z) )

                ds_out_uint8(ri-1, ci-1, z-1) = 255;
                end
            end
        end
    end
     clear ds_out;
     ds_out = ds_out_uint8;
     ds_out = public_expand(ds_out);
     clear ds_out_uint8;
end